// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String          @unique
  password       String
  extractions    Extraction[]
  receipts       Receipt[]
  invoices       Invoice[]
  cardStatements CardStatement[]
  preferences    Preferences?
}

model Preferences {
  id                               String   @id @default(uuid())
  userId                           String   @unique
  classificationModel              String
  extractionModel                  String
  analysisModel                    String
  receiptExampleExtractionId       String?
  invoiceExampleExtractionId       String?
  cardStatementExampleExtractionId String?
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  TO_RECOGNIZE
  TO_EXTRACT
  TO_VERIFY
  PROCESSED
}

model Extraction {
  id            String         @id @default(uuid())
  userId        String
  filename      String
  objectPath    String
  status        Status         @default(TO_RECOGNIZE)
  category      String?
  text          String?
  json          Json?
  receipt       Receipt?
  invoice       Invoice?
  cardStatement CardStatement?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Receipt {
  id           String        @id @default(uuid())
  userId       String
  extractionId String        @unique
  objectPath   String
  from         String
  category     String
  total        Float
  date         DateTime
  number       String?
  time         String?
  subtotal     Float?
  tax          Float?
  tip          Float?
  items        ReceiptItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  extraction Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)
}

model ReceiptItem {
  id          String @id @default(uuid())
  receiptId   String
  description String
  quantity    Float
  amount      Float

  receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
}

model Invoice {
  id             String        @id @default(uuid())
  userId         String
  extractionId   String        @unique
  objectPath     String
  category       String
  fromName       String
  totalAmountDue Float
  date           DateTime
  invoiceNumber  String?
  fromAddress    String?
  toName         String?
  toAddress      String?
  currency       String?
  items          InvoiceItem[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  extraction Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)
}

model InvoiceItem {
  id          String @id @default(uuid())
  invoiceId   String
  description String
  amount      Float?

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model CardStatement {
  id               String            @id @default(uuid())
  userId           String
  extractionId     String            @unique
  objectPath       String
  date             DateTime
  issuerName       String
  totalAmountDue   Float
  issuerAddress    String?
  recipientName    String?
  recipientAddress String?
  creditCardName   String?
  creditCardHolder String?
  creditCardNumber String?
  transactions     CardTransaction[]
  currency         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  extraction Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)
}

model CardTransaction {
  id              String @id @default(uuid())
  cardStatementId String
  category        String
  description     String
  amount          Float

  cardStatement CardStatement @relation(fields: [cardStatementId], references: [id], onDelete: Cascade)
}
